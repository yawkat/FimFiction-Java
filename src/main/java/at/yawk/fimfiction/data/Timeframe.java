package at.yawk.fimfiction.data;

import com.google.common.base.Splitter;
import java.util.List;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Timeframes are the spans in which a story can be searched. For Fimfiction searches,
 * you can specify a timeframe.
 *
 * @author Jonas Konrad (yawkat)
 */
public interface Timeframe extends Identifiable {
    /**
     * The actual length of this timeframe, in milliseconds.
     */
    long getLengthMs();

    /**
     * The internal ID of this timeframe Fimfiction uses.
     */
    int getFimfictionId();

    /**
     * Default timeframes.
     */
    public static enum DefaultTimeframe implements Timeframe {
        ONE_DAY(1000 * 60 * 60 * 24, 1, "one_day"),
        ONE_WEEK(ONE_DAY.length * 7, 2, "one_week");

        private static final DefaultTimeframe[] defaultTimeframesByFimfictionId = new DefaultTimeframe[3];

        static {
            for (DefaultTimeframe character : DefaultTimeframe.values()) {
                defaultTimeframesByFimfictionId[character.getFimfictionId()] = character;
            }
        }

        static { IdentifiableMapper.addMapping(FimCharacter.class, values()); }

        /**
         * Returns a Timeframe for the ID generated by Identifiable#getId. This does not only return
         * DefaultTimeframes but might also return encoded, generic ones.
         */
        @Nullable
        public static Timeframe forId(@Nonnull String id) {
            if (id.startsWith("generic:")) {
                List<String> parts = Splitter.on(':').limit(3).splitToList(id);
                if (parts.size() == 3) {
                    try {
                        return getOrCreateTimeframe(Integer.parseInt(parts.get(1)), Long.parseLong(parts.get(2)));
                    } catch (Exception ignored) {}
                }
            }
            return IdentifiableMapper.findIdentifiable(Timeframe.class, id);
        }

        /**
         * Returns a default timeframe for the given fimfiction ID.
         */
        @Nullable
        public static DefaultTimeframe forFimfictionId(int fimfictionId) {
            return fimfictionId >= 0 && fimfictionId < defaultTimeframesByFimfictionId.length ?
                    defaultTimeframesByFimfictionId[fimfictionId] :
                    null;
        }

        /**
         * Returns a Timeframe for the given id and length (in milliseconds). This might be a DefaultTimeframe or a
         * generic one if the timeframe is unknown. In the case of generated instances,
         * the getId method will return an encoded String that can be understood by forId.
         */
        @Nonnull
        public static Timeframe getOrCreateTimeframe(final int fimfictionId, final long lengthMs) {
            Timeframe defaultCharacter = forFimfictionId(fimfictionId);
            if (defaultCharacter == null) {
                return new Timeframe() {
                    @Override
                    public int getFimfictionId() {
                        return fimfictionId;
                    }

                    @Nonnull
                    @Override
                    public long getLengthMs() {
                        return lengthMs;
                    }

                    @Nonnull
                    @Override
                    public String getId() {
                        return "generic:" + getFimfictionId() + ":" + getLengthMs();
                    }
                };
            } else {
                return defaultCharacter;
            }
        }

        private final long length;
        private final int fimfictionId;
        private final String id;

        DefaultTimeframe(long length, int fimfictionId, String id) {
            this.length = length;
            this.fimfictionId = fimfictionId;
            this.id = id;
        }

        @Override
        public long getLengthMs() {
            return length;
        }

        @Override
        public int getFimfictionId() {
            return fimfictionId;
        }

        @Override
        public String getId() {
            return id;
        }
    }
}
